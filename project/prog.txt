grammar prog ;
root : (headerf)+ mfunction (function)* ;

headerf : '*' 'start' '#' dtype '!p' '#' ;
dtype :  'stdio'
       | 'stdlib'
       | 'string' ;


function :vtype (LET)+ '(' (vtype LET)? ')' mainblock ;

mfunction : vtype 'main' '(' ')' mainblock ;


mainblock : '[' mainblockD ']' ;
mainblockD : ( statement
            | forstatement
            | ifstatement
            | whilestatement
            | callstatement )+ ;


statement : (vtype (LET (',')?)+ '$')+ (exp '$')* ;
forstatement : (vtype (LET (',')?)+ '$')+ (exp '$')* 'For' '(' exp '.' exp '.' incdec ')' forblock (exp '$')* ;
ifstatement  : (vtype (LET (',')?)+ '$')+ (exp '$')* ifBlock ;
whilestatement : (vtype (LET (',')?)+ '$')+ (exp '$')* 'While' '(' exp ')'  whileBlock (exp '$')*  ;
callstatement  : (vtype (LET (',')?)+ '$')+ (exp '$')* (LET)+ '(' (term)? ')' '$' ;


forblock : '[' forblockD ']' ;
forblockD : (exp '$')* 'For' '(' exp '.' exp '.' incdec ')' nestedFor (exp '$')*
           | (exp '$')* ifBlock ;

whileBlock :'[' whileBlockD ']' ;
whileBlockD : (exp '$')* ifBlock ;

nestedFor : '[' nestedForD ']' ;
nestedForD : (exp '$')* ifBlock ;



ifBlock : 'if' '(' exp ')' ifElseBlock 'else' ifElseBlock ;
ifElseBlock : '[' ifElseBlockD ']' ;
ifElseBlockD: (exp '$')+ ;


exp :   exp binary exp
      | exp relational exp
      | exp logical exp
      | '(' exp ')'
      | term operand term
      | term ;
binary     : '+' | '-' | '*' | '/' ;
relational : '=' | '!=' | '>' | '>=' | '<' | '<=' | '==' ;
logical    : '&' | '|' ;




incdec : '++'| '--' ;

operand   : '+=' | '-=' ;

term : LET | DIG ;
DIG :[0-9]+ ;
LET : [a-zA-Z]+ ;
vtype : 'Int' | 'Bool' | 'Char' | 'Float' ;


WS : [ \t\r\n]+ -> skip ;
